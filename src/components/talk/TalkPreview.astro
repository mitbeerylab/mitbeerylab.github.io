---
import type { HTMLTag, Polymorphic } from "astro/types";
import type { CollectionEntry } from "astro:content";

import { getTalkSortDate } from "@/data/talk";

import FormattedDate from "../FormattedDate.astro";
import { Icon } from "astro-icon/components";

type Props<Tag extends HTMLTag> = {
	talk: CollectionEntry<"talk">;
	withDesc?: boolean;
} & Polymorphic<{ as: Tag }>;

const { as: Tag = "div", talk, withDesc = false } = Astro.props;
const talkDate = getTalkSortDate(talk);

const parseYoutubeID = (url: string) => {
    var match = url.match(/^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/);
    return (match && match[7] && match[7].length === 11) ? match[7] : false;
}
---
<Tag class="flex flex-row items-center">
	<FormattedDate class="min-w-[120px] text-gray-600 dark:text-gray-400" date={talkDate} />
		{talk.data.draft && <span class="text-red-500">(Draft) </span>}
		{talk.data.external && (
			<a href={talk.data.external}>{parseYoutubeID(talk.data.external) && <img alt="" src={`https://img.youtube.com/vi/${parseYoutubeID(talk.data.external)}/default.jpg`} />}</a>
			<a href={talk.data.external}class="cactus-link m-6">{talk.data.title}<Icon aria-hidden="true" class="inline mx-1 h-4 w-4" focusable="false" name="mdi:external-link" /></a>
		)}
	{withDesc && <q class="line-clamp-3 italic">{talk.data.description}</q>}
</Tag>